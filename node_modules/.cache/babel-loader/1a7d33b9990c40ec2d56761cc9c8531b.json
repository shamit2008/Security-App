{"ast":null,"code":"import _classCallCheck from \"/Users/shauryamittal/Desktop/Security-App/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/shauryamittal/Desktop/Security-App/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar DataSheetBase = /*#__PURE__*/function () {\n  function DataSheetBase(id, updateCb) {\n    _classCallCheck(this, DataSheetBase);\n\n    this.lastAvailableKey = function (arr) {\n      var lastKey = 0;\n\n      for (var i = 0; i < arr.length; i++) {\n        if (arr[i].key !== undefined && arr[i].key > lastKey) lastKey = arr[i].key;\n      }\n\n      return ++lastKey;\n    };\n\n    this.id = id;\n    this.updateCb = updateCb;\n    this.items = [];\n    this.requestedKeyPath = '';\n    this.makeDefaultItems();\n  }\n\n  _createClass(DataSheetBase, [{\n    key: \"makeDefaultItems\",\n    value: function makeDefaultItems() {// subclasses can override\n    } // -- these methods will typically be overridden in a subclass by a React Studio web service plugin.\n    //    'options' is an optional value that should be passed to a React Studio provided callback by a plugin implementer.\n    //    it can be used to identify async writes by caller code.\n\n  }, {\n    key: \"addItem\",\n    value: function addItem(item, options) {\n      item.key = this.lastAvailableKey(this.items);\n      this.items.push(item);\n    }\n  }, {\n    key: \"removeItem\",\n    value: function removeItem(item, options) {\n      this.items = this.items.filter(function (i) {\n        return i.key !== item.key;\n      });\n    }\n  }, {\n    key: \"replaceItemByRowIndex\",\n    value: function replaceItemByRowIndex(idx, newItem, options) {\n      if (idx < 0 || idx >= this.items.length) return;\n      this.items.splice(idx, 1, newItem);\n    }\n  }, {\n    key: \"replaceItemByKey\",\n    value: function replaceItemByKey(key, newItem, options) {\n      // this is the method that gets called for updates.\n      // a subclasser can override this method instead of the 'byRowIndex' variant if needed.\n      var idx = this.rowIndexForKey(key);\n      if (idx < 0) return;\n      return this.replaceItemByRowIndex(idx, newItem, options);\n    } // -- utility methods\n\n  }, {\n    key: \"rowIndexForKey\",\n    value: function rowIndexForKey(key) {\n      for (var i = 0; i < this.items.length; i++) {\n        if (this.items[i].key === key) return i;\n      }\n\n      return -1;\n    }\n  }, {\n    key: \"loadFromJson\",\n    value: function loadFromJson(json) {\n      var _this = this;\n\n      var setupArrayKeys = function setupArrayKeys(json) {\n        // for an array, ensure that items have a key (this is required by React)\n        var lastKey = _this.lastAvailableKey(json);\n\n        for (var i = 0; i < json.length; i++) {\n          if (json[i].key === undefined) json[i].key = lastKey++;\n        }\n      };\n\n      if (Array.isArray(json)) {\n        setupArrayKeys(json);\n        this.items = json;\n      } else if (json) {\n        // if we received a single JSON object, set it as the first row in the sheet.\n        // if there's a keypath specified, look up that first.\n        var keyPath = this.requestedKeyPath;\n\n        if (!keyPath || keyPath.length < 1) {\n          if (!json.key) json.key = 0;\n          this.items = [json];\n        } else {\n          // look for the requested key path within this object\n          var pathComps = keyPath.split('.');\n\n          var _iterator = _createForOfIteratorHelper(pathComps),\n              _step;\n\n          try {\n            for (_iterator.s(); !(_step = _iterator.n()).done;) {\n              var comp = _step.value;\n              if (!json.hasOwnProperty(comp)) break;\n              json = json[comp];\n            }\n          } catch (err) {\n            _iterator.e(err);\n          } finally {\n            _iterator.f();\n          }\n\n          if (Array.isArray(json)) {\n            setupArrayKeys(json);\n            this.items = json;\n          } else {\n            if (!json.key) json.key = 0;\n            this.items = [json];\n          }\n        }\n      } else {\n        this.items = [];\n      }\n    }\n  }, {\n    key: \"expandSlotTemplateString\",\n    value: function expandSlotTemplateString(query, slots, outUsedSlotsArray\n    /*optional*/\n    ) {\n      // this method parses the tiny template format offered in React Studio's data sheet settings.\n      // these template strings can contain references to data slot values, like this:\n      //\n      //     page=$slot('someDataSlot')&username=$slot('anotherDataSlot')\n      if (query.length < 1) return \"\";\n      var scanIndex = 0;\n      var expanded = \"\";\n\n      while (scanIndex < query.length) {\n        var index = query.indexOf(\"$slot(\", scanIndex);\n\n        if (index === -1) {\n          index = query.length;\n        }\n\n        expanded += query.substring(scanIndex, index);\n        scanIndex = index;\n        if (index === query.length) break;\n        scanIndex += \"$slot(\".length;\n        index = query.indexOf(\")\", scanIndex);\n\n        if (index !== -1) {\n          var slotRefStr = query.substring(scanIndex, index);\n          var firstChar = slotRefStr.charAt(0);\n\n          if (firstChar === '\\'' || firstChar === '\"') {\n            slotRefStr = slotRefStr.substring(1, slotRefStr.length - 1);\n          }\n\n          var slotValue = slots[slotRefStr] || '';\n          expanded += slotValue;\n          index += ')'.length;\n\n          if (outUsedSlotsArray && !outUsedSlotsArray.includes(slotRefStr)) {\n            outUsedSlotsArray.push(slotRefStr);\n          }\n        }\n\n        scanIndex = index === -1 ? query.length : index;\n      }\n\n      return expanded;\n    }\n  }]);\n\n  return DataSheetBase;\n}();\n\nexport { DataSheetBase as default };","map":{"version":3,"sources":["/Users/shauryamittal/Desktop/Security-App/src/DataSheetBase.js"],"names":["DataSheetBase","id","updateCb","lastAvailableKey","arr","lastKey","i","length","key","undefined","items","requestedKeyPath","makeDefaultItems","item","options","push","filter","idx","newItem","splice","rowIndexForKey","replaceItemByRowIndex","json","setupArrayKeys","Array","isArray","keyPath","pathComps","split","comp","hasOwnProperty","query","slots","outUsedSlotsArray","scanIndex","expanded","index","indexOf","substring","slotRefStr","firstChar","charAt","slotValue","includes"],"mappings":"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","sourcesContent":["export default class DataSheetBase {\n  constructor(id, updateCb) {\n    this.id = id;\n    this.updateCb = updateCb;\n    this.items = [];\n    this.requestedKeyPath = '';\n\n    this.makeDefaultItems();\n  }\n\n  makeDefaultItems() {\n    // subclasses can override\n  }\n\n\n  // -- these methods will typically be overridden in a subclass by a React Studio web service plugin.\n  //    'options' is an optional value that should be passed to a React Studio provided callback by a plugin implementer.\n  //    it can be used to identify async writes by caller code.\n\n  addItem(item, options) {\n    item.key = this.lastAvailableKey(this.items);\n    this.items.push(item);\n  }\n\n  removeItem(item, options) {\n    this.items = this.items.filter(i => i.key !== item.key);\n  }\n\n  replaceItemByRowIndex(idx, newItem, options) {\n    if (idx < 0 || idx >= this.items.length)\n      return;\n    this.items.splice(idx, 1, newItem);\n  }\n\n  replaceItemByKey(key, newItem, options) {\n    // this is the method that gets called for updates.\n    // a subclasser can override this method instead of the 'byRowIndex' variant if needed.\n    const idx = this.rowIndexForKey(key);\n    if (idx < 0)\n      return;\n    return this.replaceItemByRowIndex(idx, newItem, options);\n  }\n\n\n  // -- utility methods\n\n  rowIndexForKey(key) {\n    for (let i = 0; i < this.items.length; i++) {\n      if (this.items[i].key === key)\n        return i;\n    }\n    return -1;\n  }\n\n  lastAvailableKey = function (arr) {\n    let lastKey = 0;\n    for (var i = 0; i < arr.length; i++) {\n      if (arr[i].key !== undefined && arr[i].key > lastKey)\n        lastKey = arr[i].key;\n    }\n    return ++lastKey;\n  }\n\n  loadFromJson(json) {\n    let setupArrayKeys = (json) => {\n      // for an array, ensure that items have a key (this is required by React)\n      let lastKey = this.lastAvailableKey(json);\n      for (var i = 0; i < json.length; i++) {\n        if (json[i].key === undefined)\n          json[i].key = lastKey++;\n      }\n    }\n\n    if (Array.isArray(json)) {\n      setupArrayKeys(json);\n      this.items = json;\n    }\n    else if (json) {\n      // if we received a single JSON object, set it as the first row in the sheet.\n      // if there's a keypath specified, look up that first.\n      var keyPath = this.requestedKeyPath;\n      if ( !keyPath || keyPath.length < 1) {\n        if ( !json.key) json.key = 0;\n        this.items = [ json ];\n      } else {\n        // look for the requested key path within this object\n        var pathComps = keyPath.split('.');\n        for (var comp of pathComps) {\n          if ( !json.hasOwnProperty(comp)) break;\n          json = json[comp];\n        }\n        if (Array.isArray(json)) {\n          setupArrayKeys(json);\n          this.items = json;\n        } else {\n          if ( !json.key) json.key = 0;\n          this.items = [ json ];\n        }\n      }\n    }\n    else {\n      this.items = [];\n    }\n  }\n\n  expandSlotTemplateString(query, slots, outUsedSlotsArray /*optional*/) {\n    // this method parses the tiny template format offered in React Studio's data sheet settings.\n    // these template strings can contain references to data slot values, like this:\n    //\n    //     page=$slot('someDataSlot')&username=$slot('anotherDataSlot')\n\n    if (query.length < 1)\n      return \"\";\n\n    let scanIndex = 0;\n    let expanded = \"\";\n    while (scanIndex < query.length) {\n      let index = query.indexOf(\"$slot(\", scanIndex);\n      if (index === -1) {\n        index = query.length;\n      }\n      expanded += query.substring(scanIndex, index);\n      scanIndex = index;\n\n      if (index === query.length)\n        break;\n\n      scanIndex += \"$slot(\".length;\n\n      index = query.indexOf(\")\", scanIndex);\n      if (index !== -1) {\n        let slotRefStr = query.substring(scanIndex, index);\n        const firstChar = slotRefStr.charAt(0);\n        if (firstChar === '\\'' || firstChar === '\"') {\n          slotRefStr = slotRefStr.substring(1, slotRefStr.length - 1);\n        }\n        const slotValue = slots[slotRefStr] || '';\n        expanded += slotValue;\n\n        index += ')'.length;\n\n        if (outUsedSlotsArray && !outUsedSlotsArray.includes(slotRefStr)) {\n          outUsedSlotsArray.push(slotRefStr);\n        }\n      }\n      scanIndex = (index === -1) ? query.length : index;\n    }\n    return expanded;\n  }\n\n}\n"]},"metadata":{},"sourceType":"module"}