{"ast":null,"code":"import _objectSpread from \"/Users/Juha/Documents/React Studio/Works In Progress/My App - Untitled/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/Users/Juha/Documents/React Studio/Works In Progress/My App - Untitled/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/Juha/Documents/React Studio/Works In Progress/My App - Untitled/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/Juha/Documents/React Studio/Works In Progress/My App - Untitled/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/Juha/Documents/React Studio/Works In Progress/My App - Untitled/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/Juha/Documents/React Studio/Works In Progress/My App - Untitled/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/Juha/Documents/React Studio/Works In Progress/My App - Untitled/src/App.js\";\nimport React, { Component } from 'react';\nimport LocalizedStrings from 'react-localization';\nimport { Route, Switch, Redirect, withRouter } from 'react-router-dom';\nimport * as util from 'util';\nimport './App.css';\nimport StartScreen from './StartScreen.js';\nimport DataSheet_localizationSheet from './DataSheet_localizationSheet.js';\n\nvar App = /*#__PURE__*/function (_Component) {\n  _inherits(App, _Component);\n\n  function App(_props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, _props));\n\n    _this.windowDidResize = function () {\n      var w = window.innerWidth;\n      var formatId;\n      if (w < 576) formatId = 'narrow-phone';else if (w < 768) formatId = 'wide-phone';else if (w < 1024) formatId = 'narrow-tablet';else formatId = 'wide-tablet';\n\n      if (formatId !== _this.state.screenFormatId) {\n        _this.setState({\n          screenFormatId: formatId\n        });\n      }\n    };\n\n    _this.goToScreen = function (screenId, props) {\n      // This method is the default implementation and could be customized by a navigation plugin.\n      _this.props.history.push('/' + screenId, _objectSpread({}, props, {\n        appActions: null,\n        locStrings: null,\n        dataSheets: null\n      }));\n\n      window.scrollTo(0, 0);\n    };\n\n    _this.goBack = function () {\n      // This method is the default implementation and could be customized by a navigation plugin.\n      _this.props.history.goBack();\n    };\n\n    _this.getDataSheet = function (sheetId) {\n      // This method is the default implementation and could be customized by a state management plugin.\n      return _this.dataSheets[sheetId];\n    };\n\n    _this.addToDataSheet = function (sheetId, newRow, actionId) {\n      // This method is the default implementation and could be customized by a state management plugin.\n      var sheet = _this.dataSheets[sheetId];\n\n      if (sheet && newRow) {\n        sheet.addItem(newRow, _this['serviceOptions_' + sheetId] || {});\n      }\n\n      _this.setState({});\n    };\n\n    _this.updateInDataSheet = function (sheetId, row, actionId) {\n      // This method is the default implementation and could be customized by a state management plugin.\n      var sheet = _this.dataSheets[sheetId];\n\n      if (sheet && row) {\n        sheet.replaceItemByKey(row.key, row, _this['serviceOptions_' + sheetId] || {});\n\n        _this.setState({});\n      }\n    };\n\n    _this.removeFromDataSheet = function (sheetId, row) {\n      var sheet = _this.dataSheets[sheetId];\n\n      if (sheet && row) {\n        sheet.removeItem(row, _this['serviceOptions_' + sheetId] || {});\n      }\n\n      _this.setState({});\n    };\n\n    _this.updateDataSlot = function (slotId, value, actionId) {\n      // This method is the default implementation and could be customized by a state management plugin.\n      if (value == _this.dataSlots[slotId]) return;\n      _this.dataSlots[slotId] = value;\n\n      if (slotId === 'ds_activeLang') {\n        _this.locStrings.setLanguage(value);\n      }\n\n      _this.setState({});\n    };\n\n    _this.dataSheetDidUpdate = function (dataSheet) {\n      // This method is the default implementation and could be customized by a state management plugin.\n      _this.setState({});\n    };\n\n    _this.updateLocalizationFromDataSheet = function (dataSheet) {\n      var stringsObj = dataSheet.getStringsByLanguage();\n\n      if (stringsObj && Object.keys(stringsObj).length > 0) {\n        _this.locStrings = new LocalizedStrings(stringsObj);\n      } else {\n        _this.locStrings = new LocalizedStrings({\n          en: {}\n        });\n      }\n\n      _this.locStrings.setLanguage(_this.dataSlots['ds_activeLang']);\n    };\n\n    _this.dataSheets = {};\n    _this.dataSheets['localizationSheet'] = new DataSheet_localizationSheet('localizationSheet', _this.dataSheetDidUpdate);\n    _this.dataSheetLoaded = {};\n    _this.dataSlots = {};\n    _this.dataSlots['ds_activeLang'] = \"en\";\n\n    _this.updateLocalizationFromDataSheet(_this.dataSheets['localizationSheet']);\n\n    _this.state = {\n      screenTransitionForward: true\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.windowDidResize();\n      window.addEventListener('resize', this.windowDidResize);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      window.removeEventListener('resize', this.windowDidResize);\n    }\n  }, {\n    key: \"isLoading\",\n    value: function isLoading() {\n      return this.state.loading;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var makeElementForScreen = function makeElementForScreen(screenId, baseProps, atTop, forward) {\n        var screenProps = _objectSpread({}, baseProps, {\n          atTopOfScreenStack: atTop,\n          transitionForward: forward,\n          appActions: _this2,\n          dataSheets: _this2.dataSheets,\n          locStrings: _this2.locStrings,\n          deviceInfo: {\n            screenFormatId: _this2.state.screenFormatId\n          },\n          'ds_activeLang': _this2.dataSlots['ds_activeLang']\n        });\n\n        switch (screenId) {\n          default:\n            return null;\n\n          case 'start':\n            return /*#__PURE__*/React.createElement(StartScreen, Object.assign({}, screenProps, {\n              __self: _this2,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 142,\n                columnNumber: 19\n              }\n            }));\n        }\n      };\n\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"App\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(Switch, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Route, {\n        path: \"/\",\n        render: function render(props) {\n          return makeElementForScreen('start', props.location.state, true, true);\n        },\n        exact: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(Route, {\n        path: \"/start\",\n        render: function render(props) {\n          return makeElementForScreen('start', props.location.state, true, true);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 11\n        }\n      })));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default withRouter(App);","map":{"version":3,"sources":["/Users/Juha/Documents/React Studio/Works In Progress/My App - Untitled/src/App.js"],"names":["React","Component","LocalizedStrings","Route","Switch","Redirect","withRouter","util","StartScreen","DataSheet_localizationSheet","App","props","windowDidResize","w","window","innerWidth","formatId","state","screenFormatId","setState","goToScreen","screenId","history","push","appActions","locStrings","dataSheets","scrollTo","goBack","getDataSheet","sheetId","addToDataSheet","newRow","actionId","sheet","addItem","updateInDataSheet","row","replaceItemByKey","key","removeFromDataSheet","removeItem","updateDataSlot","slotId","value","dataSlots","setLanguage","dataSheetDidUpdate","dataSheet","updateLocalizationFromDataSheet","stringsObj","getStringsByLanguage","Object","keys","length","en","dataSheetLoaded","screenTransitionForward","addEventListener","removeEventListener","loading","makeElementForScreen","baseProps","atTop","forward","screenProps","atTopOfScreenStack","transitionForward","deviceInfo","location"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport LocalizedStrings from 'react-localization';\nimport { Route, Switch, Redirect, withRouter } from 'react-router-dom';\nimport * as util from 'util';\nimport './App.css';\nimport StartScreen from './StartScreen.js';\nimport DataSheet_localizationSheet from './DataSheet_localizationSheet.js';\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.dataSheets = {};\n    this.dataSheets['localizationSheet'] = new DataSheet_localizationSheet('localizationSheet', this.dataSheetDidUpdate);\n    this.dataSheetLoaded = {};\n\n    this.dataSlots = {};\n    this.dataSlots['ds_activeLang'] = \"en\";\n\n    this.updateLocalizationFromDataSheet(this.dataSheets['localizationSheet']);\n\n    this.state = {\n      screenTransitionForward: true,\n    }\n\n  }\n\n  windowDidResize = () => {\n    let w = window.innerWidth;\n    let formatId;\n    if (w < 576) formatId = 'narrow-phone';\n    else if (w < 768) formatId = 'wide-phone';\n    else if (w < 1024) formatId = 'narrow-tablet';\n    else formatId = 'wide-tablet';\n    if (formatId !== this.state.screenFormatId) {\n      this.setState({screenFormatId: formatId});\n    }\n  }\n\n  componentDidMount() {\n    this.windowDidResize();\n    window.addEventListener('resize', this.windowDidResize);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.windowDidResize);\n  }\n\n  isLoading() {\n    return this.state.loading;\n  }\n\n  goToScreen = (screenId, props) => {\n    // This method is the default implementation and could be customized by a navigation plugin.\n    this.props.history.push('/'+screenId, {...props, appActions: null, locStrings: null, dataSheets: null});\n    window.scrollTo(0, 0);\n  }\n\n  goBack = () => {\n    // This method is the default implementation and could be customized by a navigation plugin.\n    this.props.history.goBack();\n  }\n\n  getDataSheet = (sheetId) => {\n    // This method is the default implementation and could be customized by a state management plugin.\n    return this.dataSheets[sheetId];\n  }\n\n  addToDataSheet = (sheetId, newRow, actionId) => {\n    // This method is the default implementation and could be customized by a state management plugin.\n    let sheet = this.dataSheets[sheetId];\n    if (sheet && newRow) {\n      sheet.addItem(newRow, this['serviceOptions_'+sheetId] || {});\n    }\n    this.setState({});\n  }\n\n  updateInDataSheet = (sheetId, row, actionId) => {\n    // This method is the default implementation and could be customized by a state management plugin.\n    let sheet = this.dataSheets[sheetId];\n    if (sheet && row) {\n      sheet.replaceItemByKey(row.key, row, this['serviceOptions_'+sheetId] || {});\n      this.setState({});\n    }\n  }\n\n  removeFromDataSheet = (sheetId, row) => {\n    let sheet = this.dataSheets[sheetId];\n    if (sheet && row) {\n      sheet.removeItem(row, this['serviceOptions_'+sheetId] || {});\n    }\n    this.setState({});\n  }\n\n  updateDataSlot = (slotId, value, actionId) => {\n    // This method is the default implementation and could be customized by a state management plugin.\n    if (value == this.dataSlots[slotId])\n      return;\n\n    this.dataSlots[slotId] = value;\n\n    if (slotId === 'ds_activeLang') {\n      this.locStrings.setLanguage(value);\n    }\n    this.setState({});\n  }\n\n  dataSheetDidUpdate = (dataSheet) => {\n    // This method is the default implementation and could be customized by a state management plugin.\n    this.setState({});\n  }\n\n  updateLocalizationFromDataSheet = (dataSheet) => {\n    const stringsObj = dataSheet.getStringsByLanguage();\n    if (stringsObj && Object.keys(stringsObj).length > 0) {\n      this.locStrings = new LocalizedStrings(stringsObj);\n    } else {\n      this.locStrings = new LocalizedStrings({en: {}});\n    }\n    this.locStrings.setLanguage(this.dataSlots['ds_activeLang']);\n  }\n\n  render() {\n    let makeElementForScreen = (screenId, baseProps, atTop, forward) => {\n      let screenProps = {\n        ...baseProps,\n        atTopOfScreenStack: atTop,\n        transitionForward: forward,\n        appActions: this,\n        dataSheets: this.dataSheets,\n        locStrings: this.locStrings,\n        deviceInfo: {\n          screenFormatId: this.state.screenFormatId\n        },\n        'ds_activeLang': this.dataSlots['ds_activeLang'],\n      };\n      switch (screenId) {\n        default:\n          return null;\n        case 'start':\n          return (<StartScreen {...screenProps} />)\n      }\n    }\n\n    return (\n      <div className=\"App\">\n        <Switch>\n          <Route path=\"/\" render={(props) => makeElementForScreen('start', props.location.state, true, true)} exact />\n          <Route path=\"/start\" render={(props) => {\n            return makeElementForScreen('start', props.location.state, true, true);\n          }} />\n        </Switch>\n      </div>\n    );\n  }\n}\nexport default withRouter(App)\n"]},"metadata":{},"sourceType":"module"}